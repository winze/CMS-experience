<?php

namespace Proxies\__CG__\Winze\PageBuilderBundle\Document;

use Doctrine\ODM\MongoDB\Persisters\DocumentPersister;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class Page extends \Winze\PageBuilderBundle\Document\Page implements \Doctrine\ODM\MongoDB\Proxy\Proxy
{
    private $__documentPersister__;
    public $__identifier__;
    public $__isInitialized__ = false;
    public function __construct(DocumentPersister $documentPersister, $identifier)
    {
        $this->__documentPersister__ = $documentPersister;
        $this->__identifier__ = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->__documentPersister__) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->__documentPersister__->load($this->__identifier__, $this) === null) {
                throw \Doctrine\ODM\MongoDB\DocumentNotFoundException::documentNotFound(get_class($this), $this->__identifier__);
            }
            unset($this->__documentPersister__, $this->__identifier__);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function preUpdated()
    {
        $this->__load();
        return parent::preUpdated();
    }

    public function contenuExists($id)
    {
        $this->__load();
        return parent::contenuExists($id);
    }

    public function removeContenu($id)
    {
        $this->__load();
        return parent::removeContenu($id);
    }

    public function pageChildrenExist($id)
    {
        $this->__load();
        return parent::pageChildrenExist($id);
    }

    public function removePageChildren($id)
    {
        $this->__load();
        return parent::removePageChildren($id);
    }

    public function getAliasEn()
    {
        $this->__load();
        return parent::getAliasEn();
    }

    public function setAliasEn($aliasEn)
    {
        $this->__load();
        return parent::setAliasEn($aliasEn);
    }

    public function getTitleEn()
    {
        $this->__load();
        return parent::getTitleEn();
    }

    public function setTitleEn($titleEn)
    {
        $this->__load();
        return parent::setTitleEn($titleEn);
    }

    public function getMetaDataEn()
    {
        $this->__load();
        return parent::getMetaDataEn();
    }

    public function setMetaDataEn($metaDataEn)
    {
        $this->__load();
        return parent::setMetaDataEn($metaDataEn);
    }

    public function getMetaDescriptionEn()
    {
        $this->__load();
        return parent::getMetaDescriptionEn();
    }

    public function setMetaDescriptionEn($metaDescriptionEn)
    {
        $this->__load();
        return parent::setMetaDescriptionEn($metaDescriptionEn);
    }

    public function getMetaKeyEn()
    {
        $this->__load();
        return parent::getMetaKeyEn();
    }

    public function setMetaKeyEn($metaKeyEn)
    {
        $this->__load();
        return parent::setMetaKeyEn($metaKeyEn);
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return $this->__identifier__;
        }
        $this->__load();
        return parent::getId();
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setPagePatern(\Winze\PageBuilderBundle\Document\Page $pagePatern)
    {
        $this->__load();
        return parent::setPagePatern($pagePatern);
    }

    public function getPagePatern()
    {
        $this->__load();
        return parent::getPagePatern();
    }

    public function addPageChildren(\Winze\PageBuilderBundle\Document\Page $pageChildren)
    {
        $this->__load();
        return parent::addPageChildren($pageChildren);
    }

    public function getPageChildren()
    {
        $this->__load();
        return parent::getPageChildren();
    }

    public function setAlias($alias)
    {
        $this->__load();
        return parent::setAlias($alias);
    }

    public function getAlias()
    {
        $this->__load();
        return parent::getAlias();
    }

    public function setTitle($title)
    {
        $this->__load();
        return parent::setTitle($title);
    }

    public function getTitle()
    {
        $this->__load();
        return parent::getTitle();
    }

    public function setMetaData($metaData)
    {
        $this->__load();
        return parent::setMetaData($metaData);
    }

    public function getMetaData()
    {
        $this->__load();
        return parent::getMetaData();
    }

    public function setMetaDescription($metaDescription)
    {
        $this->__load();
        return parent::setMetaDescription($metaDescription);
    }

    public function getMetaDescription()
    {
        $this->__load();
        return parent::getMetaDescription();
    }

    public function setMetaKey($metaKey)
    {
        $this->__load();
        return parent::setMetaKey($metaKey);
    }

    public function getMetaKey()
    {
        $this->__load();
        return parent::getMetaKey();
    }

    public function addContenus(\Winze\PageBuilderBundle\Document\Contenu $contenus)
    {
        $this->__load();
        return parent::addContenus($contenus);
    }

    public function getContenus()
    {
        $this->__load();
        return parent::getContenus();
    }

    public function setIsActif($isActif)
    {
        $this->__load();
        return parent::setIsActif($isActif);
    }

    public function getIsActif()
    {
        $this->__load();
        return parent::getIsActif();
    }

    public function setRoalRead($roalRead)
    {
        $this->__load();
        return parent::setRoalRead($roalRead);
    }

    public function getRoalRead()
    {
        $this->__load();
        return parent::getRoalRead();
    }

    public function setCreatedAt($createdAt)
    {
        $this->__load();
        return parent::setCreatedAt($createdAt);
    }

    public function getCreatedAt()
    {
        $this->__load();
        return parent::getCreatedAt();
    }

    public function setUpdateAt($updateAt)
    {
        $this->__load();
        return parent::setUpdateAt($updateAt);
    }

    public function getUpdateAt()
    {
        $this->__load();
        return parent::getUpdateAt();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'name', 'pagePatern', 'pageChildren', 'alias', 'aliasEn', 'title', 'titleEn', 'metaData', 'metaDataEn', 'metaDescription', 'metaDescriptionEn', 'metaKey', 'metaKeyEn', 'contenus', 'isActif', 'roalRead', 'createdAt', 'updateAt');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->__documentPersister__) {
            $this->__isInitialized__ = true;
            $class = $this->__documentPersister__->getClassMetadata();
            $original = $this->__documentPersister__->load($this->__identifier__);
            if ($original === null) {
                throw \Doctrine\ODM\MongoDB\MongoDBException::documentNotFound(get_class($this), $this->__identifier__);
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->__documentPersister__, $this->__identifier__);
        }
        
    }
}