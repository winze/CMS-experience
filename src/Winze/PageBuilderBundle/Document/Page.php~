<?php

namespace Winze\PageBuilderBundle\Document;

use Doctrine\ODM\MongoDB\Mapping\Annotations as MongoDB;

/**
 * Description of Page
 *
 * @author Vincent
 * @MongoDB\Document(repositoryClass="Winze\PageBuilderBundle\Repository\PageRepository")
 * 
 */
class Page {

    /**
     * @MongoDB\Id
     */
    protected $id;

    /**
     * Nom de la page pour l'administrateur
     * @MongoDB\String
     */
    protected $name;

    /**
     * @MongoDB\ReferenceOne(
     *     targetDocument="Winze\PageBuilderBundle\Document\Page"
     * )
     */
    protected $pagePatern;

    /**
     * @MongoDB\ReferenceMany(
     *     targetDocument="Winze\PageBuilderBundle\Document\Page",
     *     cascade="all"
     * )
     */
    protected $pageChildren;

    /**
     * Alias de la page pour l'url rewriting
     * par défault l'alias sera un url_encode {titles_parent}/{title}
     * @MongoDB\String
     */
    protected $alias;

    /**
     * Titre de la page afficher dans le <title>
     * @MongoDB\String
     */
    protected $title;

    /**
     * @MongoDB\String
     */
    protected $metaData;

    /**
     * @MongoDB\String
     */
    protected $metaDescription;

    /**
     * @MongoDB\String
     */
    protected $metaKey;

    /**
     * @MongoDB\ReferenceMany(
     *     targetDocument="Winze\PageBuilderBundle\Document\Contenu",
     *     cascade="all",
     *     sort={"position"=-1}
     * )
     */
    protected $contenus;

    /**
     * @MongoDB\Boolean
     */
    protected $isActif;

    /**
     * Le rôle minimal pour accéder à la page
     * par défault All user
     * @MongoDB\Int
     */
    protected $roalRead;

    /**
     * @MongoDB\Date
     */
    protected $createdAt;

    /**
     * @MongoDB\Date
     */
    protected $updateAt;

    /**
     * @MongoDB\PreUpdate 
     */
    public function preUpdated() {
        $this->updateAt = new \DateTime();
    }

    /**
     * Fontion qui permet de savoir si le contenu est associé à la page
     * @param string $id
     * @return boolean
     */
    public function contenuExists($id) {
        if (count($this->getContenus()) > 0) {
            foreach ($this->getContenus() as $key=>$contenu) {
                if ($contenu->getId() == $id) {
                    return $key;
                }
            }
        }
        return false;
    }

    /**
     * Fonction de suppression d'un contenu d'un page
     * @param string $id Id du contenu à supprimer
     * @return boolean/Winze\PageBuilderBundle\Document\Contenu Retourn false si les contenu n'est pas associé
     *                      à la page sinon retourne l'objet contenu
     */
    public function removeContenu($id) {
        $key = $this->contenuExists($id);
        if($key === false){
            return false;
        }

        $contenu = $this->contenus[$key];
        unset($this->contenus[$key]);
        return $contenu;
    }
   
}
